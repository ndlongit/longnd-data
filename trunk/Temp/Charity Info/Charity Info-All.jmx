<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.7" jmeter="2.12 r1636949">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="JMeter Template" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        <stringProp name="CookieManager.policy">rfc2109</stringProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">false</boolProp>
        <boolProp name="useExpires">true</boolProp>
      </CacheManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager " enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">text/html</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables - Server-Common" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="server" elementType="Argument">
            <stringProp name="Argument.name">server</stringProp>
            <stringProp name="Argument.value">www.charitynavigator.org</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">80</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="encoding" elementType="Argument">
            <stringProp name="Argument.name">encoding</stringProp>
            <stringProp name="Argument.value">utf-8</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables - Others" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="outputPath" elementType="Argument">
            <stringProp name="Argument.name">outputPath</stringProp>
            <stringProp name="Argument.value">D:\Data-Store\Temp</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="itemsPerPage" elementType="Argument">
            <stringProp name="Argument.name">itemsPerPage</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
        <stringProp name="ConstantTimer.delay">2000</stringProp>
      </ConstantTimer>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Web Server" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${server}</stringProp>
        <stringProp name="HTTPSampler.port">${port}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding">${encoding}</stringProp>
        <stringProp name="HTTPSampler.path">/</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Charity Info" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1308904887000</longProp>
        <longProp name="ThreadGroup.end_time">1308904887000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Rating" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter Rating" enabled="true">
            <stringProp name="CounterConfig.start">4</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">rating</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">true</boolProp>
            <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
          </CounterConfig>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Paging" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">2</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter Paging" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">21</stringProp>
              <stringProp name="CounterConfig.incr">${itemsPerPage}</stringProp>
              <stringProp name="CounterConfig.name">fromIndex</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/index.cfm?bay=search.results&amp;overallrtg=${rating}&amp;FromRec=${fromIndex}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Navigator Site" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">UrlList</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//div[@id =&quot;searchresults&quot;]/form/table//tr/td/h3/a/@href</stringProp>
                <boolProp name="XPathExtractor.validate">true</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">true</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach - UrlList" enabled="true">
              <stringProp name="ForeachController.inputVal">UrlList</stringProp>
              <stringProp name="ForeachController.returnVal">url</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View Details" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${url}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Org Name" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">OrgName</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//h1[@class =&quot;charityname&quot;]/text()</stringProp>
                  <boolProp name="XPathExtractor.validate">true</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Contact Info" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">ContactInfo</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//div[@class =&quot;rating&quot;]/p/text()</stringProp>
                  <boolProp name="XPathExtractor.validate">true</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">true</boolProp>
                  <boolProp name="XPathExtractor.fragment">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Email" enabled="false">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">Email</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//div[@class =&quot;rating&quot;]/p[2]/a[1]</stringProp>
                  <boolProp name="XPathExtractor.validate">true</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Website" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">Website</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//div[@class =&quot;rating&quot;]/p[2]/a[2]/@href</stringProp>
                  <boolProp name="XPathExtractor.validate">true</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Ranking" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">Ranking</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//div[@class=&quot;shadedtable&quot;]/table//tr[2]/td[3]/strong/img/@title</stringProp>
                  <boolProp name="XPathExtractor.validate">true</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">true</boolProp>
                  <boolProp name="XPathExtractor.fragment">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Total Revenue" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">TotalRevenue</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//div[@id=&quot;summary&quot;]/div[@class=&quot;summarywrap&quot;]/div[2]/div/table//tr[13]/td[2]/strong/text()</stringProp>
                  <boolProp name="XPathExtractor.validate">true</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">true</boolProp>
                  <boolProp name="XPathExtractor.fragment">true</boolProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Category" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">Category</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//div[@id=&quot;maincontent&quot;]//p[@class =&quot;crumbs&quot;]/text()</stringProp>
                  <boolProp name="XPathExtractor.validate">true</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">true</boolProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <boolProp name="XPathExtractor.fragment">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">OrgName = vars.get(&quot;OrgName&quot;);
ContactInfo = vars.get(&quot;ContactInfo&quot;);
Website = vars.get(&quot;Website&quot;);
Ranking = vars.get(&quot;Ranking&quot;);
TotalRevenue = vars.get(&quot;TotalRevenue&quot;);
Category = vars.get(&quot;Category&quot;);
PathUrl = vars.get(&quot;url&quot;);

OutputDir = vars.get(&quot;outputPath&quot;);
///*
Protocol = vars.get(&quot;protocol&quot;);
ServerName = vars.get(&quot;server&quot;);
Port = vars.get(&quot;port&quot;);
//ServerUrl = Protocol + &quot;://&quot; + ServerName + &quot;:&quot; + Port + &quot;/&quot;;
ServerUrl = ServerName + &quot;/&quot;;
//*/

var csvDelim = &quot;,&quot;;

if(OrgName != null &amp;&amp; OrgName.trim() != &quot;&quot;) {
	try {
		var MainCategory = &quot;&quot;;
		var SubCategory = &quot;&quot;;
		var OrgId = &quot;&quot;;

		try {
			var i = PathUrl.lastIndexOf(&quot;=&quot;);
	        	OrgId = PathUrl.substring(i + 1);
	
	        	var v = Category.split(&quot;:&quot;);
	         	MainCategory = v[0].trim();
	        	SubCategory = v[1].trim();
		} catch (e) {}

        	var row = OrgId;
		row += csvDelim + OrgName.replaceAll(&quot;,&quot;, &quot;&quot;);
		row += csvDelim + ContactInfo.replaceAll(&quot;,&quot;, &quot;&quot;);
		row += csvDelim + Website.replaceAll(&quot;,&quot;, &quot;&quot;);
		row += csvDelim + Ranking.replaceAll(&quot;,&quot;, &quot;&quot;);
		row += csvDelim + TotalRevenue.replaceAll(&quot;,&quot;, &quot;&quot;);
		row += csvDelim + MainCategory.replaceAll(&quot;,&quot;, &quot;&quot;);
		row += csvDelim + SubCategory.replaceAll(&quot;,&quot;, &quot;&quot;);
		row += csvDelim + ServerUrl + PathUrl;

		f = new FileOutputStream(OutputDir + &quot;/results-all.csv&quot;, true);
		p = new PrintStream(f);
		this.interpreter.setOut(p);
		print(row);
		f.close();
	} catch (e) {
		f.close();
	}
}
</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="All Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>false</timestamp>
              <success>false</success>
              <label>false</label>
              <code>false</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
