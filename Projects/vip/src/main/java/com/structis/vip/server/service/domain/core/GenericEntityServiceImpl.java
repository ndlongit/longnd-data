/*
 * Generated by Celerio, a Jaxio tool. http://www.jaxio.com/
 */
package com.structis.vip.server.service.domain.core;

import java.io.Serializable;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.dao.InvalidDataAccessApiUsageException;
import org.springframework.transaction.annotation.Transactional;

import com.structis.vip.server.bean.domain.core.Identifiable;
import com.structis.vip.server.dao.support.GenericDao;
import com.structis.vip.server.dao.support.SearchTemplate;

public abstract class GenericEntityServiceImpl<T extends Identifiable<PK>, PK extends Serializable> implements GenericEntityService<T, PK> {

    protected Logger logger;

    public GenericEntityServiceImpl() {
        this.logger = Logger.getLogger(this.getClass());
    }

    abstract public GenericDao<T, PK> getDao();

    /**
     * {@inheritDoc}
     */
    @Override
    public abstract T getNew();

    /**
     * {@inheritDoc}
     */
    @Override
    public abstract T getNewWithDefaults();

    // -------------------------------------------------------------
    // Save methods
    // -------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional
    public void save(T model) {
        this.getDao().save(model);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional
    public void save(Iterable<T> models) {
        this.getDao().save(models);
    }

    @Override
    @Transactional
    public void flush() {
        this.getDao().flush();
    }

    // -------------------------------------------------------------
    // Get and Delete methods (primary key or unique constraints)
    // -------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public T getByPrimaryKey(PK primaryKey) {
        T entity = this.getNew();
        entity.setPrimaryKey(primaryKey);
        return this.get(entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional
    public void deleteByPrimaryKey(PK primaryKey) {
        this.delete(this.getByPrimaryKey(primaryKey));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public T get(T model) {
        return this.getDao().get(model);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional
    public void delete(T model) {
        if (model == null) {
            if (this.logger.isDebugEnabled()) {
                this.logger.debug("Skipping deletion for null model!");
            }

            return;
        }

        this.getDao().delete(model);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional
    public void delete(Iterable<T> models) {
        this.getDao().delete(models);
    }

    // -------------------------------------------------------------
    // Refresh
    // -------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public void refresh(T entity) {
        this.getDao().refresh(entity);
    }

    // -------------------------------------------------------------
    // Finders methods
    // -------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public T findUnique(T model) {
        return this.findUnique(model, new SearchTemplate());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public T findUnique(T model, SearchTemplate searchTemplate) {
        T result = this.findUniqueOrNone(model, searchTemplate);

        if (result == null) {
            throw new InvalidDataAccessApiUsageException("Developper: You expected 1 result but we found none ! sample: " + model);
        }

        return result;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public T findUniqueOrNone(T model) {
        return this.findUniqueOrNone(model, new SearchTemplate());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public T findUniqueOrNone(T model, SearchTemplate searchTemplate) {
        // this code is an optimisation to prevent using a count
        // we request at most 2, if there's more than one then we throw an InvalidDataAccessApiUsageException
        SearchTemplate searchTemplateBounded = new SearchTemplate(searchTemplate);
        searchTemplateBounded.setFirstResult(0);
        searchTemplateBounded.setMaxResults(2);
        List<T> results = this.find(model, searchTemplateBounded);

        if (results == null || results.isEmpty()) {
            return null;
        }

        if (results.size() > 1) {
            throw new InvalidDataAccessApiUsageException("Developper: You expected 1 result but we found more ! sample: " + model);
        }

        return results.iterator().next();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public List<T> find() {
        return this.find(this.getNew(), new SearchTemplate());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public List<T> find(T model) {
        return this.find(model, new SearchTemplate());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public List<T> find(SearchTemplate searchTemplate) {
        return this.find(this.getNew(), searchTemplate);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public List<T> find(T model, SearchTemplate searchTemplate) {
        return this.getDao().find(model, searchTemplate);
    }

    // -------------------------------------------------------------
    // Count methods
    // -------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public int findCount() {
        return this.findCount(this.getNew(), new SearchTemplate());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public int findCount(T model) {
        return this.findCount(model, new SearchTemplate());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public int findCount(SearchTemplate searchTemplate) {
        return this.findCount(this.getNew(), searchTemplate);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public int findCount(T model, SearchTemplate searchTemplate) {
        return this.getDao().findCount(model, searchTemplate);
    }
}
